Key Python Files and Data Files/Directories:

**Core Python Files:**

*   **`ai.py`**:
    *   **Role/Purpose**: Manages all interactions with the Google Gemini AI. It's responsible for sending prompts, receiving generated content, and performing initial cleaning of the AI's output. Key functions include `generate()` and `generatelite()`.

*   **`world_gen.py`**:
    *   **Role/Purpose**: This script orchestrates the AI-powered generation of the game world's map. It reads a `backstory.json` from a specified save slot, uses prompt templates from `prompts.py` to create a detailed request, and then calls `ai.py` to generate the `map.json` file.

*   **`gameplay.py`**:
    *   **Role/Purpose**: Intended to be the heart of the game, housing the main game loop, logic for player actions, interactions within the game world, and overall game progression. Currently, it is largely a placeholder, signifying that these core gameplay mechanics are yet to be implemented.

*   **`prompts.py`**:
    *   **Role/Purpose**: A critical file containing various string templates that are fed to the AI to guide its content generation. It includes templates for generating detailed backstories (`back_story`), world maps (`world_gen`, `big_map`), and functions like `specification_worldgen()` to further customize these prompts based on specific narrative inputs (e.g., protagonist details, location, theme).

*   **`back_story.py`**:
    *   **Role/Purpose**: This script is used to generate the initial narrative foundation for a new game. It takes a save slot number, uses a predefined prompt from `prompts.py` (and a hardcoded theme about a microorganism on an asteroid), and calls `ai.py` to create the `backstory.json` file for that save slot.

*   **`file.py`**:
    *   **Role/Purpose**: Appears to be a utility or testing script. Its current implementation reads `Storage/map.json` (a general map file, not one from a specific saveslot) and prints its "tiles" data. Likely used for quick debugging of map data rather than being part of the main game flow.

**Important Data Files and Directories:**

*   **`readme.md`**:
    *   **Role/Purpose**: The primary documentation file. It provides an overview of the project's concept as a text-based RPG, outlines its intended core features, lists potential enhancements, and discusses its suitability as a learning project.

*   **`Storage/` (Directory)**:
    *   **Role/Purpose**: The main directory for all persistent game data, particularly data that is generated by the AI or used as input for AI generation processes.

    *   **`Storage/Saveslots/` (Sub-directory)**:
        *   **Role/Purpose**: Organizes individual game instances or playthroughs into separate save slots (e.g., numbered directories like `1/`, `2/`). Each slot contains the unique data for that specific game.

        *   **`Storage/Saveslots/*/backstory.json` (Data File)**:
            *   **Role/Purpose**: Located within each save slot, this JSON file stores the AI-generated detailed narrative for that game. It includes the world's history, protagonist's profile (background, motivations, abilities, traits), overarching theme, specific setting details, and the central conflict. This file is a key input for `world_gen.py`.

        *   **`Storage/Saveslots/*/map.json` (Data File)**:
            *   **Role/Purpose**: Also within each save slot, this JSON file contains the AI-generated game map. It defines the map dimensions and lists all the map tiles, each with an ID, name, and descriptive text.

        *   **`Storage/Saveslots/*/story.json` (Data File)**:
            *   **Role/Purpose**: Intended to hold the dynamic and evolving story elements of a game in progress for a specific save slot. However, these files are currently observed to be empty, indicating that this feature (dynamic story progression) is not yet implemented.

    *   **`Storage/backstory.json`, `Storage/bigmap.json`, `Storage/data.json` (Data Files at `Storage/` root)**:
        *   **Role/Purpose**: The precise roles of these files are less defined by the primary scripts. `Storage/backstory.json` could be a template or a global default. `Storage/bigmap.json` might relate to the `big_map` prompt in `prompts.py` (though the prompt itself seems to generate a 10x10 map). `Storage/data.json` is generic. These could be for testing, default configurations, or remnants of earlier development phases.

**Other Notable Files (Role Inferred):**

*   **`debugging.py`**: Likely contains utility functions or scripts aiding in debugging the application.
*   **`interface.py`**: Presumably intended to handle the game's user interface, though its current implementation and integration are unknown.
*   **`overload.py`**: The name suggests it might be used for Python's function or operator overloading, or perhaps for stress-testing certain functionalities. Its specific role is not clear from the context.
*   **`quests.py`**: Indicates an intention or early development of a quest system within the game.
*   **`tile_type.py`**: Could define classes or attributes for different types of map tiles, potentially complementing the data in `map.json`.
*   **`.gitignore`**: A standard Git configuration file that specifies which files and directories should be ignored by version control.
*   **`Extras/LICENSE`**: Contains the licensing information for the project.
*   **`gameplay.txt`**: Contents unknown; possibly contains notes, ideas, or outdated text related to gameplay design.
